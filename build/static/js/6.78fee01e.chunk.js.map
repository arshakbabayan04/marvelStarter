{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charForm/CharForm.js","components/error-Boundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getAllComics","_ref2","_callee2","_args2","_context2","_transformComics","getCharacter","_ref3","_callee3","id","_context3","getCharacterByName","_ref4","_callee4","name","_context4","_x2","getComic","_ref5","_callee5","_context5","_x3","char","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","View","imgStyle","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","onCharLoaded","slice","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","CSSTransition","timeout","classNames","ref","el","tabIndex","onCharSelected","onKeyDown","e","key","TransitionGroup","component","renderItems","disabled","Link","to","resourceURI","CharInfo","charId","CharForm","errorMessage","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","value","errorInfo","console","log","this","setState","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/6.78fee01e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: \"250px\", height: \"250px\", objectFit:\n        'contain', margin: \"0 auto\"}} src={img} alt='Error'/>\n    )\n}\n\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {request, clearError, process, setProcess} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=0651a529892b6188aa77bfec5396ac75';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics)\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getCharacterByName = async (name) => {\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n\t\treturn res.data.results.map(_transformCharacter);\n\t};\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} pages.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n    return { \n            clearError, \n            process,\n            setProcess, \n            getAllCharacters, \n            getCharacter, \n            getAllComics, \n            getComic, \n            getCharacterByName}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\nexport const useHttp = () => {\n    const [process, setProcess] = useState('waiting');\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n\n        setProcess('loading');\n\n        try {\n\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            return data;\n        } catch(e) {\n            setProcess('error');\n            throw e;\n        }\n    }, []);\n\n    const clearError = useCallback(() => {\n        setProcess('loading');\n    }, []);\n\n    return {request, clearError, process, setProcess}\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n    switch (process) {\n        case 'waiting':\n            return <Skeleton/>;\n        case 'loading':\n            return <Spinner/>;\n        case 'confirmed':\n            return <Component data={data}/>\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');                 \n    }\n}\n\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // const timerId = setInterval(updateChar, 60000);\n\n        // return () => {\n        //     clearInterval(timerId);\n        // }\n        // eslint-disable-next-line\n    }, []);\n\n    const onCharLoaded = (char) => {\n        if (char.description === '') {\n            char.description = 'There is no description for this character';\n        }\n        if (char.description.length > 150) {\n            char.description = char.description.slice(0, 150) + '...';\n        }\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))   \n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n    \n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit': 'cover',};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'contain',}\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>\n        case 'error':\n            return <ErrorMessage/>;\n        default:\n            throw new Error('Unexpected process state');                 \n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {getAllCharacters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n        .then(onCharListLoaded)\n        .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition \n                    timeout={500}\n                    classNames=\"char__item\"\n                    key={item.id}>\n                    <li \n                        ref={el => itemRefs.current[i] = el}\n                        tabIndex={0}\n                        className=\"char__item\"\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                            }}\n                        onKeyDown={(e) => {\n                            if (e.key === ' ' || e.key === 'Enter') {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    } \n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process]);\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n    \n}\n\nexport default CharList;","import { Link } from 'react-router-dom';\nimport {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n         \n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))   \n    }\n\n    const onCharLoaded = (char) => {\n        if (char.description === '') {\n            char.description = 'There is no description for this character';\n        }\n        if (char.description.length > 150) {\n            char.description = char.description.slice(0, 150) + '...';\n        }\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n    \n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    //console.log(comics[0].resourceURI.slice(43));\n    let imgStyle = {'objectFit': 'cover',};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'contain',}\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt=\"abyss\" style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to={`/comics/${item.resourceURI.slice(43)}`}>\n                                    {item.name}\n                                </Link>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charForm.scss';\n\nconst CharForm = () => {\n\n    const [char, setChar] = useState(null);\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n        .then(onCharLoaded)\n        .then(() => setProcess('confirmed'))\n    }\n\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n                    \n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues={{\n                    charName: ''\n                }}\n                validationSchema={Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit={({charName}) => {\n                    updateChar(charName);\n                }}>\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\"\n                            name=\"charName\"\n                            type=\"text\" \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={process === 'loading'}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {errorMessage}\n            {results}\n            \n        </div>\n    )\n}\n\nexport default CharForm;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>;\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharForm from \"../charForm/CharForm\";\nimport ErrorBoundary from \"../error-Boundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n    \n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                    />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar}/>\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharForm/>\n                    </ErrorBoundary>\n                </div>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;"],"sourceRoot":""}