{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/error-Boundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","message","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getAllComics","_ref2","_callee2","_args2","_context2","_transformComics","getCharacter","_ref3","_callee3","id","_context3","getComic","_ref4","_callee4","_context4","_x2","char","name","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","View","imgStyle","_jsxs","className","children","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","onCharLoaded","slice","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","ref","el","tabIndex","onCharSelected","onKeyDown","e","key","renderItems","disabled","Skeleton","_Fragment","Link","to","resourceURI","CharInfo","charId","skeleton","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","value","errorInfo","console","log","this","setState","Component","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/3.7d96b520.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{display: 'block', width: \"250px\", height: \"250px\", objectFit:\n        'contain', margin: \"0 auto\"}} src={img} alt='Error'/>\n    )\n}\n\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiKey = 'apikey=0651a529892b6188aa77bfec5396ac75';\n    const _baseOffset = 210;\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter)\n    }\n\n    const getAllComics = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformComics)\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getComic = async (id) => {\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description,\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n\t\treturn {\n\t\t\tid: comics.id,\n\t\t\ttitle: comics.title,\n\t\t\tdescription: comics.description || \"There is no description\",\n\t\t\tpageCount: comics.pageCount\n\t\t\t\t? `${comics.pageCount} pages.`\n\t\t\t\t: \"No information about the number of pages\",\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\n\t\t\tprice: comics.prices[0].price\n\t\t\t\t? `${comics.prices[0].price}$`\n\t\t\t\t: \"not available\",\n\t\t};\n\t};\n\n    return {loading, error, getAllCharacters, clearError, getCharacter, getAllComics, getComic}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n        } catch(e) {\n            setLoading(false);\n            setError(e.message)\n            throw e;\n        }\n    });\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // const timerId = setInterval(updateChar, 60000);\n\n        // return () => {\n        //     clearInterval(timerId);\n        // }\n    }, []);\n\n    const onCharLoaded = (char) => {\n        if (char.description === '') {\n            char.description = 'There is no description for this character';\n        }\n        if (char.description.length > 150) {\n            char.description = char.description.slice(0, 150) + '...';\n        }\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(error || loading) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n    \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit': 'cover',};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'contain',}\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n        .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    ref={el => itemRefs.current[i] = el}\n                    tabIndex={0}\n                    className=\"char__item\"\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                        }}\n                    onKeyDown={(e) => {\n                        if (e.key === ' ' || e.key === 'Enter') {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                     }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    } \n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n    \n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { Link } from 'react-router-dom';\nimport {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n         \n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)   \n    }\n\n    const onCharLoaded = (char) => {\n        if (char.description === '') {\n            char.description = 'There is no description for this character';\n        }\n        if (char.description.length > 150) {\n            char.description = char.description.slice(0, 150) + '...';\n        }\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>;\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(error || loading || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n    \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    //console.log(comics[0].resourceURI.slice(43));\n    let imgStyle = {'objectFit': 'cover',};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit': 'contain',}\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt=\"abyss\" style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                <Link to={`/comics/${item.resourceURI.slice(43)}`}>\n                                    {item.name}\n                                </Link>\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        });\n    }\n\n    render() {\n        if (this.state.error) {\n            return <ErrorMessage/>;\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport ErrorBoundary from \"../error-Boundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n    \n    return (\n        <>\n            <ErrorBoundary>\n                <RandomChar/>\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected}/>\n                </ErrorBoundary>\n                <ErrorBoundary>\n                    <CharInfo charId={selectedChar}/>\n                </ErrorBoundary>\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\n        </>\n    )\n}\n\nexport default MainPage;"],"sourceRoot":""}